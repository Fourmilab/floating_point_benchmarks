begin

    comment

        John Walker's Floating Point Benchmark, derived from...

        Marinchip Interactive Lens Design System

        By John Walker
           http://www.fourmilab.ch/

        This program may be used, distributed, and modified freely as
        long as the origin information is preserved.

        This is a complete optical design raytracing algorithm,
        stripped of its user interface and recast into Simula.
        It not only determines execution speed on an extremely
        floating point (including trig function) intensive
        real-world application, it checks accuracy on an algorithm
        that is exquisitely sensitive to errors. The performance of
        this program is typically far more sensitive to changes in
        the efficiency of the trigonometric library routines than the
        average floating point program.

       Derived from the ALGOL 60 language implementation in June 2014
       by John Walker.
    ;

    comment
        Variables and constants global to all procedures.
    ;

    comment
        Wavelengths of standard spectral lines in Angstroms
                (Not all are used in this program)
    ;

    integer aLine, bLine, cLine, dLine,
            eLine, fLine, gPrimeLine,
            hLine;
    real array spectralLine(1:8);

    comment
        The testCase is an array of SurfaceProperty objects,
        each of which gives the radius of curvature, refractive
        index, dispersion, and edge thickness of the surface
        being entered.
    ;

    class SurfaceProperty(crad, iref, disp, ethick);
      value crad, iref, disp, ethick;
      real crad, iref, disp, ethick;
    begin
        real curvatureRadius,
             indexOfRefraction,
             Dispersion,
             edgeThickness;

        curvatureRadius := crad;
        indexOfRefraction := iref;
        Dispersion := disp;
        edgeThickness := ethick;
    end class SurfaceProperty;

    ref(SurfaceProperty) array testCase(1:4);

    integer currentSurfaces;
    integer curvatureRadius, indexOfRefraction, dispersion,
        edgeThickness;

    real clearAperture, aberrLspher, aberrOsc, aberrLchrom,
         maxLspher, maxOsc, maxLchrom, radiusOfCurvature,
         objectDistance, rayHeight, axisSlopeAngle,
         fromIndex, toIndex;

    integer numberOfIterations, iteration;

    integer paraxial, marginalRay, paraxialRay;

    comment
        The DlineResults array holds the result from the main trace of
        paraxial and marginal rays in D light.  The array is indexed
        with the orientation of the ray (marginalRay or paraxialRay)
        and each entry is a traceResults object containing the
        object distance and axis slope angle resulting from tracing
        that line.
    ;

    class traceResults(odist, sangle);
      value odist, sangle;
      real odist, sangle;
    begin
        real objectDistance, axisSlopeAngle;

        objectDistance := odist;
        axisSlopeAngle := sangle;
    end class traceResults;

    ref(traceResults) array DlineResults(1:2);

    comment
        For the C and F lines we need only save the object distance to
        compute the aberrations.
    ;

    real odCline, odFline;

    comment

        Calculate passage through surface

        If the variable paraxial is paraxial ray, the trace through the
        surface will be done using the paraxial approximations.
        Otherwise, the normal trigonometric trace will be done.

        This procedure takes the following global inputs:

        radius of curvature     Radius of curvature of surface
                                being crossed.  If 0, surface is
                                plane.

        object distance         Distance of object focus from
                                lens vertex.  If 0, incoming
                                rays are parallel and
                                the following must be specified:

        ray height              Height of ray from axis.  Only
                                relevant if object distance = 0

        axis slope angle        Angle incoming ray makes with axis
                                at intercept

        from index              Refractive index of medium being left

        to index                Refractive index of medium being
                                entered.

        The outputs are the following global variables:

        object distance         Distance from vertex to object focus
                                after refraction.

        axis slope angle        Angle incoming ray makes with axis
                                at intercept after refraction.
    ;

    procedure transitSurface;
    begin
        real iang, rang, iangSin, rangSin,
             oldAxisSlopeAngle, sagitta;

        if paraxial = paraxialRay then begin
            if radiusOfCurvature ne 0 then begin
                if objectDistance = 0 then begin
                    axisSlopeAngle := 0;
                    iangSin := rayHeight / radiusOfCurvature
                end else
                    iangSin := ((objectDistance -
                        radiusOfCurvature) / radiusOfCurvature) *
                        axisSlopeAngle;
                rangSin := (fromIndex / toIndex) * iangSin;
                oldAxisSlopeAngle := axisSlopeAngle;
                axisSlopeAngle := axisSlopeAngle +
                    iangSin - rangSin;
                if objectDistance ne 0 then
                    rayHeight := objectDistance * oldAxisSlopeAngle;
                objectDistance := rayHeight / axisSlopeAngle
            end else begin
                objectDistance := objectDistance * (toIndex / fromIndex);
                axisSlopeAngle := axisSlopeAngle * (fromIndex / toIndex)
            end
        end else begin
            if radiusOfCurvature ne 0 then begin
                if objectDistance = 0 then begin
                    axisSlopeAngle := 0;
                    iangSin := rayHeight / radiusOfCurvature
                end else
                    iangSin := ((objectDistance -
                        radiusOfCurvature) / radiusOfCurvature) *
                        sin(axisSlopeAngle);
                iang := arcSin(iangSin);
                rangSin := (fromIndex / toIndex) * iangSin;
                oldAxisSlopeAngle := axisSlopeAngle;
                axisSlopeAngle := axisSlopeAngle +
                    iang - arcSin(rangSin);
                sagitta := sin((oldAxisSlopeAngle + iang) / 2);
                sagitta := 2 * radiusOfCurvature * (sagitta ** 2);
                objectDistance := ((radiusOfCurvature *
                    sin(oldAxisSlopeAngle + iang)) *
                    coTan(axisSlopeAngle)) + sagitta
            end else begin
                rang := -arcSin((fromIndex / toIndex) *
                    sin(axisSlopeAngle));
                objectDistance := objectDistance * ((toIndex *
                    cos(-rang)) / (fromIndex *
                    cos(axisSlopeAngle)));
                axisSlopeAngle := -rang
           end

        end
    end transitSurface;

    comment
        Perform ray trace for a given design for a specific
        spectral line and ray height.  The caller specifies the
        desired spectral line and ray height.  The global
        object distance is updated based upon tracing this
        ray.
    ;

    procedure traceLine(line, rayH);
        value line, rayH;
        integer line;
        real rayH;
    begin
        integer i;

        objectDistance := 0;
        rayHeight := rayH;
        fromIndex := 1;

        for i := 1 step 1 until currentSurfaces do begin
            radiusOfCurvature := testCase(i).curvatureRadius;
            toIndex := testCase(i).indexOfRefraction;
            if toIndex > 1 then
                toIndex := toIndex + ((spectralLine(dLine) -
                    spectralLine(line)) /
                    (spectralLine(cLine) - spectralLine(fLine))) *
                    ((testCase(i).indexOfRefraction - 1.0) /
                    testCase(i).Dispersion);
            transitSurface;
            fromIndex := toIndex;
            if i < currentSurfaces then
                objectDistance := objectDistance -
                    testCase(i).edgeThickness
        end
    end traceLine;

    comment END GLOBAL DECLARATONS ;

    comment Spectral lines ;

    aLine := 1; bLine := 2; cLine := 3; dLine := 4; eLine := 5;
    fLine := 6; gPrimeLine := 7; hLine := 8;

    spectralLine(aLine)       := 7621.0;
    spectralLine(bLine)       := 6869.955;
    spectralLine(cLine)       := 6562.8160;
    spectralLine(dLine)       := 5895.944;
    spectralLine(eLine)       := 5269.557;
    spectralLine(fLine)       := 4861.344;
    spectralLine(gPrimeLine)  := 4340.477;
    spectralLine(hLine)       := 3968.494;

    comment  Initialise the test case array

             The  test case used in this program is the design for a 4 inch
             f/12 achromatic telescope objective used as the example in Wyld's
             classic work on ray tracing by hand, given in Amateur Telescope
             Making, Volume 3 (Volume 2 in the 1996 reprint edition).
    ;

    currentSurfaces := 4;

    curvatureRadius := 1; indexOfRefraction := 2; dispersion := 3;
        edgeThickness := 4;

    comment                             CurRad  Index   Disp  Edge   ;
    testCase(1) :- new SurfaceProperty(  27.05, 1.5137, 63.6, 0.52  );
    testCase(2) :- new SurfaceProperty( -16.68, 1.0,     0.0, 0.138 );
    testCase(3) :- new SurfaceProperty( -16.68, 1.6164, 36.7, 0.38  );
    testCase(4) :- new SurfaceProperty( -78.1,  1.0,     0.0, 0.0   );

    marginalRay := 1; paraxialRay := 2;

    numberOfIterations := 99000000;

    numberOfIterations := 1;

    clearAperture := 4;

    for iteration := 0 step 1 until numberOfIterations do begin

        for paraxial := marginalRay step 1 until paraxialRay do begin
            traceLine(dLine, clearAperture / 2);
            DlineResults(paraxial) :- new traceResults(objectDistance, axisSlopeAngle)
        end;

        comment Trace marginal ray in C ;

        paraxial := marginalRay;
        traceLine(cLine, clearAperture / 2);
        odCline := objectDistance;

        comment Trace marginal ray in F ;

        traceLine(fLine, clearAperture / 2);
        odFline := objectDistance;

        comment

            Compute aberrations of the design

            The longitudinal spherical aberration is just the
            difference between where the D line comes to focus
            for paraxial and marginal rays. ;

        aberrLspher := DlineResults(paraxialRay).objectDistance -
                       DlineResults(marginalRay).objectDistance;

        comment

            The offense against the sine condition is a measure
            of the degree of coma in the design.  We compute it
            as the lateral distance in the focal plane between
            where a paraxial ray and marginal ray in the D line
            come to focus. ;

        aberrOsc := 1 - ((DlineResults(paraxialRay).objectDistance *
                           DlineResults(paraxialRay).axisSlopeAngle) /
                           (sin(DlineResults(marginalRay).axisSlopeAngle) *
                            DlineResults(marginalRay).objectDistance));

        comment

            The axial chromatic aberration is the distance between
            where marginal rays in the C and F lines come to focus. ;

        aberrLchrom := odFline - odCline;

        comment

            Compute maximum acceptable values for each aberration

            Maximum longitudinal spherical aberration, which is
            also the maximum for axial chromatic aberration.  This
            is computed for the D line. ;

        maxLspher := 0.0000926 / sin(DlineResults(marginalRay).axisSlopeAngle) ** 2;
        maxLchrom := maxLspher;
        maxOsc := 0.0025
    end;

    comment Print the analysis of the ray trace ;

    OutText("   Marginal ray        ");
    OutFix(DlineResults(marginalRay).objectDistance, 11, 16);
    OutFix(DlineResults(marginalRay).axisSlopeAngle, 11, 16); OutImage;

    OutText("   Paraxial ray        ");
    OutFix(DlineResults(paraxialRay).objectDistance, 11, 16);
    OutFix(DlineResults(paraxialRay).axisSlopeAngle, 11, 16); OutImage;

    OutText("Longitudinal spherical aberration:      ");
    OutFix(aberrLspher, 11, 16); OutImage;
    OutText("    (Maximum permissible):              ");
    OutFix(maxLspher, 11, 16); OutImage;

    OutText("Offense against sine condition (coma):  ");
    OutFix(aberrOsc, 11, 16); OutImage;
    OutText("    (Maximum permissible):              ");
    OutFix(maxOsc, 11, 16); OutImage;

    OutText("Axial chromatic aberration:             ");
    OutFix(aberrLchrom, 11, 16); OutImage;
    OutText("    (Maximum permissible):              ");
    OutFix(maxLchrom, 11, 16); OutImage

end
